// üëâ ‡§ï‡•ã‡§° ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à?
// 1Ô∏è‚É£ Stack (stk) ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç, ‡§ú‡§ø‡§∏‡§∏‡•á ‡§π‡§Æ parentheses ‡§ï‡•ã Last In, First Out (LIFO) ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á handle ‡§ï‡§∞ ‡§∏‡§ï‡•á‡§Ç‡•§

// 2Ô∏è‚É£ Loop ‡§ö‡§≤‡§æ‡§§‡•á ‡§π‡•à‡§Ç str.length ‡§§‡§ï

// ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à open bracket ((, {, [) ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á stack ‡§Æ‡•á‡§Ç push ‡§ï‡§∞ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç‡•§
// ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à close bracket (), }, ]) ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à, ‡§§‡•ã
// Stack ‡§ï‡§æ ‡§ü‡•â‡§™ (stk[stk.length - 1]) ‡§ö‡•á‡§ï ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç, ‡§Ö‡§ó‡§∞ matching bracket ‡§π‡•à, ‡§§‡•ã pop() ‡§ï‡§∞ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç‡•§
// ‡§Ö‡§ó‡§∞ match ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ ‡§Ø‡§æ stack ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ñ‡§æ‡§≤‡•Ä ‡§π‡•à, ‡§§‡•ã ‡§Ø‡§π unbalanced ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è false return ‡§ï‡§∞ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç‡•§
// 3Ô∏è‚É£ Loop ‡§ñ‡§§‡•ç‡§Æ ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶:

// ‡§Ö‡§ó‡§∞ stack ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§ñ‡§æ‡§≤‡•Ä ‡§π‡•ã ‡§ö‡•Å‡§ï‡§æ ‡§π‡•à, ‡§§‡•ã ‡§á‡§∏‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§∏‡§≠‡•Ä brackets match ‡§π‡•ã ‡§ö‡•Å‡§ï‡•á ‡§π‡•à‡§Ç, ‡§á‡§∏‡§≤‡§ø‡§è true return ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§
// ‡§Ö‡§ó‡§∞ stack ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§¨‡§ö‡§æ ‡§π‡•à, ‡§§‡•ã ‡§á‡§∏‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§ï‡•Å‡§õ open brackets ‡§ï‡§æ ‡§ï‡•ã‡§à closing pair ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ, ‡§á‡§∏‡§≤‡§ø‡§è false return ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§

// stk[stk.length - 1] ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó Stack ‡§ï‡•á Top Element ‡§ï‡•ã Access ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§¨‡§ø‡§®‡§æ pop() ‡§ï‡§ø‡§è ‡§∏‡§ø‡§∞‡•ç‡§´ Last Element ‡§¶‡•á‡§§‡§æ ‡§π‡•à, ‡§§‡§æ‡§ï‡§ø ‡§π‡§Æ ‡§â‡§∏‡•á Current Character ‡§∏‡•á Compare ‡§ï‡§∞ ‡§∏‡§ï‡•á‡§Ç‡•§
// Balanced Parentheses ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à ‡§ï‡§ø ‡§π‡§∞ Close Bracket ‡§ï‡§æ Top Open Bracket ‡§∏‡•á Match ‡§π‡•ã‡•§
// ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à Mismatch ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ false return ‡§ï‡§∞ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç‡•§



// function balancedParanthesis(str){
//     let stk = []
//     for(let i=0; i<str.length; i++){
//         if(str[i] === '(' || str[i] === '[' || str[i] === '{'){

//             stk.push(str[i])
//         }else{
//             if(stk.length > 0  && ((stk[stk.length-1] === '(' && str[i] === ')' ) || (stk[stk.length-1] === '{' && str[i] === '}') || (stk[stk.length-1] === '[' && str[i] === ']' ))){
//                 stk.pop()
//             }else{
//                 return false;
//             }
//         }

//     }
//     if(stk.length === 0){
//         return true
//     }

// }




// let s = "[(])";
// // Function call
// console.log(balancedParanthesis(s) ? "true" : "false");






// function balancedParanthesis(s) {
//     let stk = [];
//     let bracketMap = { ')': '(', '}': '{', ']': '[' };

//     for (let i = 0; i < s.length; i++) {
//         if (s[i] === "(" || s[i] === "[" || s[i] === "{") {
//             stk.push(s[i]); // Push opening brackets
//         } else {
//             if (stk.length === 0 || stk.pop() !== bracketMap[s[i]]) {
//                 return false; // Unmatched closing bracket
//             }
//         }
//     }

//     return stk.length === 0;
// }

// console.log(balancedParanthesis("[{()}]") ? "true" : "false"); // ‚úÖ true
// console.log(balancedParanthesis("[{(})]") ? "true" : "false"); // ‚ùå false
// console.log(balancedParanthesis("(([]))") ? "true" : "false"); // ‚úÖ true
// console.log(balancedParanthesis("(([]") ? "true" : "false");   // ‚ùå false


// Use a stack to handle the Last-In-First-Out (LIFO) nature of brackets.
// Push open brackets and pop when matched.
// If a closing bracket doesn‚Äôt match, return false.
// If the stack is empty at the end, return true.


function balancedParenthesis(s) {
    let stk = [];
    for (let i = 0; i < s.length; i++) {
        if (s[i] === '(' || s[i] === '{' || s[i] === '[') {
            stk.push(s[i]);
        } else {
            if (stk.length === 0) {
                return false;
            }
            let last = stk[stk.length - 1];
            if ((last === '(' && s[i] === ')') ||
                (last === '{' && s[i] === '}') ||
                (last === '[' && s[i] === ']')) {
                stk.pop();
            } else {
                return false;
            }
        }
    }
    return stk.length === 0;
}

// Test cases
console.log(balancedParenthesis("[(])") ? "true" : "false"); // false
console.log(balancedParenthesis("{[()]}") ? "true" : "false"); // true
console.log(balancedParenthesis("{[(])}") ? "true" : "false"); // false
console.log(balancedParenthesis("()[]{}") ? "true" : "false"); // true
